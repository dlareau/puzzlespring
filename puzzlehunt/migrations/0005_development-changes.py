# Generated by Django 4.2.17 on 2025-01-07 02:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import puzzlehunt.models


class Migration(migrations.Migration):

    replaces = [('puzzlehunt', '0005_hintunlockplan_num_hints_alter_hunt_location_and_more'), ('puzzlehunt', '0006_remove_team_points_alter_puzzle_answer_and_more'), ('puzzlehunt', '0007_event_related_object_id_alter_event_related_data_and_more'), ('puzzlehunt', '0008_displayonlyhunt'), ('puzzlehunt', '0009_rename_end_date_displayonlyhunt_display_end_date_and_more'), ('puzzlehunt', '0010_hunt_info_page_file'), ('puzzlehunt', '0011_remove_prepuzzle_template'), ('puzzlehunt', '0012_alter_prepuzzle_response_string'), ('puzzlehunt', '0013_alter_event_type'), ('puzzlehunt', '0014_alter_huntfile_file_alter_prepuzzlefile_file_and_more'), ('puzzlehunt', '0015_rename_owner_huntfile_parent_and_more'), ('puzzlehunt', '0016_hunt_config'), ('puzzlehunt', '0017_team_num_total_hints_earned_team_points_and_more'), ('puzzlehunt', '0018_notificationplatform_notificationsubscription'), ('puzzlehunt', '0019_alter_notificationplatform_config_and_more'), ('puzzlehunt', '0020_alter_notificationsubscription_unique_together'), ('puzzlehunt', '0021_remove_notificationsubscription_platform_config_and_more'), ('puzzlehunt', '0022_alter_event_user'), ('puzzlehunt', '0023_update_alter_event_type_delete_errata'), ('puzzlehunt', '0024_alter_event_type')]

    dependencies = [
        ('puzzlehunt', '0004_add_groups'),
    ]

    operations = [
        migrations.AddField(
            model_name='hintunlockplan',
            name='num_hints',
            field=models.IntegerField(default=1, help_text='Number of hints that should be unlocked per trigger'),
        ),
        migrations.AlterField(
            model_name='hunt',
            name='location',
            field=models.CharField(blank=True, help_text='Starting location of the puzzlehunt', max_length=100),
        ),
        migrations.AlterField(
            model_name='hunt',
            name='template_file',
            field=models.FileField(blank=True, null=True, storage=puzzlehunt.models.OverwriteStorage(), upload_to=puzzlehunt.models.get_hunt_template_path),
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='id',
            field=models.CharField(help_text='A 3-8 character hex string that uniquely identifies the puzzle', max_length=8, primary_key=True, serialize=False, unique=True),
        ),
        migrations.RemoveField(
            model_name='team',
            name='points',
        ),
        migrations.AlterField(
            model_name='puzzle',
            name='answer',
            field=models.CharField(help_text='The answer to the puzzle.', max_length=100),
        ),
        migrations.AlterField(
            model_name='submission',
            name='user',
            field=models.ForeignKey(help_text='The user who created the submission', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='related_object_id',
            field=models.CharField(blank=True, max_length=30),
        ),
        migrations.AlterField(
            model_name='event',
            name='related_data',
            field=models.CharField(blank=True, max_length=400),
        ),
        migrations.AlterField(
            model_name='team',
            name='name',
            field=models.CharField(help_text='The team name as it will be shown to hunt participants', max_length=100, verbose_name='Team Name'),
        ),
        migrations.CreateModel(
            name='DisplayOnlyHunt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the hunt as the public will see it', max_length=200)),
                ('display_start_date', models.DateTimeField(help_text='The date/time at which a hunt will become visible to registered users')),
                ('display_end_date', models.DateTimeField(help_text='The date/time at which a hunt will be archived and available to the public')),
                ('num_teams', models.IntegerField(help_text='The number of teams that were registered for this hunt')),
                ('num_puzzles', models.IntegerField(help_text='The number of puzzles this hunt had')),
            ],
        ),
        migrations.AddField(
            model_name='hunt',
            name='info_page_file',
            field=models.FileField(blank=True, null=True, storage=puzzlehunt.models.OverwriteStorage(), upload_to=puzzlehunt.models.get_hunt_info_page_path),
        ),
        migrations.RemoveField(
            model_name='prepuzzle',
            name='template',
        ),
        migrations.AlterField(
            model_name='prepuzzle',
            name='response_string',
            field=models.TextField(blank=True, default='', help_text='Data returned to the webpage for use upon solving.'),
        ),
        migrations.AlterField(
            model_name='event',
            name='type',
            field=models.CharField(choices=[('PSUB', 'Submission'), ('PSOL', 'Solve'), ('PUNL', 'Unlock'), ('HREQ', 'Hint Request'), ('HRES', 'Hint Response'), ('FINH', 'Finish Hunt'), ('TMJH', 'Team Join'), ('UJTM', 'User Joined Team'), ('ULTM', 'User Left Team'), ('ERRT', 'New Errata')], help_text='The type of event', max_length=4),
        ),
        migrations.AlterField(
            model_name='huntfile',
            name='file',
            field=models.FileField(storage=puzzlehunt.models.OverwriteStorage(), unique=True, upload_to=puzzlehunt.models.get_media_file_path),
        ),
        migrations.AlterField(
            model_name='prepuzzlefile',
            name='file',
            field=models.FileField(storage=puzzlehunt.models.OverwriteStorage(), unique=True, upload_to=puzzlehunt.models.get_media_file_path),
        ),
        migrations.AlterField(
            model_name='puzzlefile',
            name='file',
            field=models.FileField(storage=puzzlehunt.models.OverwriteStorage(), unique=True, upload_to=puzzlehunt.models.get_media_file_path),
        ),
        migrations.AlterField(
            model_name='solutionfile',
            name='file',
            field=models.FileField(storage=puzzlehunt.models.OverwriteStorage(), unique=True, upload_to=puzzlehunt.models.get_media_file_path),
        ),
        migrations.AlterField(
            model_name='teamrankingrule',
            name='rule_type',
            field=models.CharField(choices=[('UNLK', 'Number of Puzzles Unlocked'), ('PUZZ', 'Number of Puzzles Solved'), ('META', 'Number of Metas Solved'), ('FINL', 'Final Puzzle Solve Time'), ('LMTM', 'Last Meta Solve Time'), ('LAST', 'Last Solve Time'), ('PNTS', 'Number of Points'), ('HINT', 'Number of Hints Left')], help_text='The type of ranking rule', max_length=4),
        ),
        migrations.RenameField(
            model_name='huntfile',
            old_name='owner',
            new_name='parent',
        ),
        migrations.RenameField(
            model_name='prepuzzlefile',
            old_name='owner',
            new_name='parent',
        ),
        migrations.RenameField(
            model_name='puzzlefile',
            old_name='owner',
            new_name='parent',
        ),
        migrations.RenameField(
            model_name='solutionfile',
            old_name='owner',
            new_name='parent',
        ),
        migrations.AddField(
            model_name='hunt',
            name='config',
            field=models.TextField(blank=True, help_text='Configuration for puzzle, point and hint unlocking rules'),
        ),
        migrations.AddField(
            model_name='team',
            name='num_total_hints_earned',
            field=models.IntegerField(default=0, help_text='The total number of hints this team has earned through config rules'),
        ),
        migrations.AddField(
            model_name='team',
            name='points',
            field=models.IntegerField(default=0, help_text='The total number of points this team has earned through config rules'),
        ),
        migrations.AlterField(
            model_name='hunt',
            name='hint_lockout',
            field=models.IntegerField(default=60, help_text='Time (in minutes) teams must wait before a hint can be used on a newly unlocked puzzle'),
        ),
        migrations.AlterField(
            model_name='team',
            name='num_available_hints',
            field=models.IntegerField(default=0, help_text='The number of hints the team currently has available to use'),
        ),
        migrations.DeleteModel(
            name='HintUnlockPlan',
        ),
        migrations.CreateModel(
            name='NotificationPlatform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('DISC', 'Discord'), ('MAIL', 'Email')], help_text='The type of notification platform', max_length=4)),
                ('name', models.CharField(help_text='A friendly name for this platform configuration', max_length=100)),
                ('enabled', models.BooleanField(default=True, help_text='Whether this platform is currently enabled')),
                ('config', models.JSONField(blank=True, help_text='Platform-specific configuration (API keys, URLs, etc.)', null=True)),
            ],
            options={
                'unique_together': {('type', 'name')},
            },
        ),
        migrations.CreateModel(
            name='NotificationSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_types', models.CharField(help_text='Comma-separated list of event types to notify on', max_length=255)),
                ('active', models.BooleanField(default=True, help_text='Whether this subscription is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hunt', models.ForeignKey(blank=True, help_text='Optional: limit notifications to a specific hunt', null=True, on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
                ('platform', models.ForeignKey(help_text='The platform to send notifications through', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.notificationplatform')),
                ('user', models.ForeignKey(help_text='The user who owns this subscription', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('destination', models.CharField(blank=True, help_text='Platform-specific destination (webhook URL, email, channel ID, etc.)', max_length=255, null=True)),
            ],
        ),
        migrations.AlterField(
            model_name='event',
            name='user',
            field=models.ForeignKey(help_text='The user associated with this event', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Update',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The text of the update announcement.', max_length=1000)),
                ('time', models.DateTimeField(help_text='The time the update was announced')),
                ('hunt', models.ForeignKey(help_text='The hunt that update is part of', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
                ('puzzle', models.ForeignKey(blank=True, help_text='The puzzle this update relates to (leave blank for hunt updates)', null=True, on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.puzzle')),
            ],
        ),
        migrations.AlterField(
            model_name='event',
            name='type',
            field=models.CharField(choices=[('PSUB', 'Submission'), ('PSOL', 'Solve'), ('PUNL', 'Unlock'), ('HREQ', 'Hint Request'), ('HRES', 'Hint Response'), ('FINH', 'Finish Hunt'), ('TMJH', 'Team Join'), ('UJTM', 'User Joined Team'), ('ULTM', 'User Left Team'), ('UPDT', 'New Update')], help_text='The type of event', max_length=4),
        ),
        migrations.DeleteModel(
            name='Errata',
        ),
        migrations.AlterField(
            model_name='event',
            name='type',
            field=models.CharField(choices=[('PSUB', 'Submission'), ('PSOL', 'Solve'), ('PUNL', 'Unlock'), ('HREQ', 'Hint Request'), ('HRES', 'Hint Response'), ('FINH', 'Finish Hunt'), ('TMJH', 'Team Join'), ('UPDT', 'New Update')], help_text='The type of event', max_length=4),
        ),
    ]
