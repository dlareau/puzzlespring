# Generated by Django 4.2 on 2024-08-22 02:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import puzzlehunt.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('flatpages', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hunt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the hunt as the public will see it', max_length=200)),
                ('team_size_limit', models.IntegerField()),
                ('start_date', models.DateTimeField(help_text='The date/time at which a hunt will become visible to registered users')),
                ('end_date', models.DateTimeField(help_text='The date/time at which a hunt will be archived and available to the public')),
                ('display_start_date', models.DateTimeField(help_text='The start date/time displayed to users')),
                ('display_end_date', models.DateTimeField(help_text='The end date/time displayed to users')),
                ('location', models.CharField(help_text='Starting location of the puzzlehunt', max_length=100)),
                ('is_current_hunt', models.BooleanField(default=False)),
                ('template_file', models.FileField(null=True, storage=puzzlehunt.models.OverwriteStorage(), upload_to=puzzlehunt.models.get_hunt_template_path)),
                ('hint_lockout', models.IntegerField(default=60, help_text='The number of minutes before a hint can be used on a newly unlocked puzzle')),
            ],
        ),
        migrations.CreateModel(
            name='Prepuzzle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the puzzle as it will be seen by hunt participants', max_length=200)),
                ('released', models.BooleanField(default=False)),
                ('answer', models.CharField(help_text='The answer to the puzzle, not case sensitive', max_length=100)),
                ('template', models.TextField(default='{% extends "prepuzzle.html" %}\r\n{% load prepuzzle_tags %}\r\n\r\n{% block content %}\r\n{% endblock content %}', help_text='The template string to be rendered to HTML on the hunt page')),
                ('response_string', models.TextField(default='', help_text='Data returned to the webpage for use upon solving.')),
                ('allow_spaces', models.BooleanField(default=False, help_text='Allow spaces in the answer submissions')),
                ('case_sensitive', models.BooleanField(default=False, help_text='Check for case in answer submissions')),
                ('allow_non_alphanumeric', models.BooleanField(default=False, help_text='Allow for full unicode in answer submissions (rather than just A-Z and 0-9)')),
                ('hunt', models.OneToOneField(blank=True, help_text='The hunt that this puzzle is a part of, leave blank for no associated hunt.', null=True, on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
            ],
        ),
        migrations.CreateModel(
            name='Puzzle',
            fields=[
                ('id', models.CharField(help_text='A 3-5 character hex string that uniquely identifies the puzzle', max_length=8, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text='The name of the puzzle as it will be seen by hunt participants', max_length=200)),
                ('order_number', models.IntegerField(help_text='The number of the puzzle within the hunt, for sorting purposes')),
                ('answer', models.CharField(help_text='The answer to the puzzle, not case sensitive', max_length=100)),
                ('type', models.CharField(choices=[('STD', 'Standard'), ('MET', 'Meta'), ('FIN', 'Final'), ('NON', 'Non-puzzle')], default='STD', help_text='The type of puzzle', max_length=3)),
                ('extra_data', models.CharField(blank=True, help_text='A misc. field for any extra data to be stored with the puzzle.', max_length=200)),
                ('allow_spaces', models.BooleanField(default=False, help_text='Allow spaces in the answer submissions')),
                ('case_sensitive', models.BooleanField(default=False, help_text='Check for case in answer submissions')),
                ('allow_non_alphanumeric', models.BooleanField(default=False, help_text='Allow for full unicode in answer submissions (rather than just A-Z and 0-9)')),
                ('hunt', models.ForeignKey(help_text='The hunt that this puzzle is a part of', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
            ],
            options={
                'ordering': ['-hunt', 'order_number'],
            },
        ),
        migrations.CreateModel(
            name='PuzzleStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlock_time', models.DateTimeField(help_text='The time this puzzle was unlocked for this team')),
                ('solve_time', models.DateTimeField(blank=True, help_text='The time this puzzle was solved for this team', null=True)),
                ('puzzle', models.ForeignKey(help_text='The puzzle this status is for', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.puzzle')),
            ],
            options={
                'verbose_name_plural': 'puzzle statuses',
            },
        ),
        migrations.CreateModel(
            name='FlatPageProxyObject',
            fields=[
            ],
            options={
                'verbose_name': 'info page',
                'verbose_name_plural': 'info pages',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('flatpages.flatpage',),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The team name as it will be shown to hunt participants', max_length=200, verbose_name='Team Name')),
                ('is_local', models.BooleanField(default=False, help_text='Is this team a majority CMU users?', verbose_name='CMU Team')),
                ('join_code', models.CharField(default=puzzlehunt.models.team_key_gen, help_text='The 8 character random alphanumeric password needed for a user to join a team', max_length=8)),
                ('playtester', models.BooleanField(default=False, help_text='A boolean to indicate if the team is a playtest team and will get early access')),
                ('playtest_start_date', models.DateTimeField(blank=True, help_text='The date/time at which a hunt will become available to the playtesters', null=True)),
                ('playtest_end_date', models.DateTimeField(blank=True, help_text='The date/time at which a hunt will no longer be available to playtesters', null=True)),
                ('num_available_hints', models.IntegerField(default=0, help_text='The number of hints the team has available to use')),
                ('points', models.IntegerField(default=0, help_text='The number of points the team has earned')),
                ('hunt', models.ForeignKey(help_text='The hunt that the team is a part of', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
                ('members', models.ManyToManyField(help_text='Members of this team', to=settings.AUTH_USER_MODEL)),
                ('puzzle_statuses', models.ManyToManyField(blank=True, help_text='The statuses of puzzles the team has unlocked', through='puzzlehunt.PuzzleStatus', to='puzzlehunt.puzzle')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_time', models.DateTimeField()),
                ('submission_text', models.CharField(max_length=100)),
                ('response_text', models.CharField(blank=True, help_text='Response to the given answer. Empty string indicates human response needed', max_length=400)),
                ('modified_time', models.DateTimeField(help_text='Last date/time of response modification')),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this submission is in response to', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.puzzle')),
                ('team', models.ForeignKey(help_text='The team that made the submission', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.team')),
                ('user', models.ForeignKey(help_text='Members of this team', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SolutionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(storage=puzzlehunt.models.OverwriteStorage(), upload_to=puzzlehunt.models.get_media_file_path)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solution_files', to='puzzlehunt.puzzle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regex', models.CharField(help_text="The python-style regex that will be checked against the user's response", max_length=400)),
                ('text', models.CharField(help_text='The text to use in the submission response if the regex matched', max_length=400)),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this automated response is related to', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.puzzle')),
            ],
            options={
                'verbose_name_plural': 'Auto Responses',
            },
        ),
        migrations.AddField(
            model_name='puzzlestatus',
            name='team',
            field=models.ForeignKey(help_text='The team that this puzzle status for', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.team'),
        ),
        migrations.CreateModel(
            name='PuzzleFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(storage=puzzlehunt.models.OverwriteStorage(), upload_to=puzzlehunt.models.get_media_file_path)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='puzzlehunt.puzzle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='puzzle',
            name='main_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='puzzlehunt.puzzlefile'),
        ),
        migrations.AddField(
            model_name='puzzle',
            name='main_solution_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='puzzlehunt.solutionfile'),
        ),
        migrations.CreateModel(
            name='PrepuzzleFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(storage=puzzlehunt.models.OverwriteStorage(), upload_to=puzzlehunt.models.get_media_file_path)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='puzzlehunt.prepuzzle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='prepuzzle',
            name='main_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='puzzlehunt.prepuzzlefile'),
        ),
        migrations.CreateModel(
            name='HuntFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(storage=puzzlehunt.models.OverwriteStorage(), upload_to=puzzlehunt.models.get_media_file_path)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='puzzlehunt.hunt')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='hunt',
            name='css_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='puzzlehunt.huntfile'),
        ),
        migrations.CreateModel(
            name='HintUnlockPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlock_type', models.CharField(choices=[('TIM', 'Exact Time Unlock'), ('INT', 'Interval Based Unlock'), ('SOL', 'Solves Based Unlock')], default='TIM', help_text='The type of hint unlock plan', max_length=3)),
                ('unlock_parameter', models.IntegerField(help_text='Parameter (Time / Interval / Solves)')),
                ('num_triggered', models.IntegerField(default=0, help_text='Number of times this Unlock Plan has given a hint')),
                ('hunt', models.ForeignKey(help_text='The hunt that this hint unlock plan refers to', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
            ],
        ),
        migrations.CreateModel(
            name='Hint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request', models.TextField(help_text='The text of the request for the hint', max_length=1000)),
                ('request_time', models.DateTimeField(help_text='Hint request time')),
                ('response', models.TextField(blank=True, help_text='The text of the response to the hint request', max_length=1000)),
                ('response_time', models.DateTimeField(blank=True, help_text='Hint response time', null=True)),
                ('last_modified_time', models.DateTimeField(help_text='Last time of modification')),
                ('refunded', models.BooleanField(default=False, help_text='Whether or not the hint was refunded')),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this hint is related to', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.puzzle')),
                ('responder', models.ForeignKey(blank=True, help_text='Staff member that has claimed the hint.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(help_text='The team that requested the hint', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.team')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='The time of the event')),
                ('type', models.CharField(choices=[('PSUB', 'Submission'), ('PSOL', 'Solve'), ('PUNL', 'Unlock'), ('HREQ', 'Hint Request'), ('HRES', 'Hint Response'), ('FINH', 'Finish Hunt'), ('TMJH', 'Team Join'), ('UJTM', 'User Joined Team'), ('ULTM', 'User Left Team'), ('ERRT', 'New Errata'), ('ACMT', 'Announcement'), ('CUST', 'Custom Event')], default='CUST', help_text='The type of event', max_length=4)),
                ('related_data', models.JSONField(blank=True)),
                ('hunt', models.ForeignKey(help_text='The hunt associated with this event', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
                ('puzzle', models.ForeignKey(blank=True, help_text='The puzzle associated with this event, if applicable', null=True, on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.puzzle')),
                ('team', models.ForeignKey(blank=True, help_text='The team associated with this event, if applicable', null=True, on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.team')),
                ('user', models.ForeignKey(help_text='The user associated with this event', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Errata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The text of the erratum announcement.', max_length=1000)),
                ('time', models.DateTimeField(help_text='The time the erratum was announced')),
                ('hunt', models.ForeignKey(help_text='The hunt that erratum is part of', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
                ('puzzle', models.ForeignKey(blank=True, help_text='The puzzle this erratum relates to (leave blank for hunt errata)', null=True, on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.puzzle')),
            ],
            options={
                'verbose_name': 'erratum',
                'verbose_name_plural': 'errata',
            },
        ),
        migrations.CreateModel(
            name='TeamRankingRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule_type', models.CharField(choices=[('PUZZ', 'Number of Puzzles Solved'), ('META', 'Number of Metas Solved'), ('FINL', 'Final Puzzle Solve Time'), ('LMTM', 'Last Meta Solve Time'), ('LAST', 'Last Solve Time'), ('PNTS', 'Number of Points'), ('HINT', 'Number of Hints Left')], help_text='The type of ranking rule', max_length=4)),
                ('rule_order', models.IntegerField(help_text='The order in which the rule is applied')),
                ('visible', models.BooleanField(default=True, help_text='Is this rule visible on the leaderboard?')),
                ('hunt', models.ForeignKey(help_text='The hunt that this ranking rule refers to', on_delete=django.db.models.deletion.CASCADE, to='puzzlehunt.hunt')),
            ],
            options={
                'unique_together': {('hunt', 'rule_order')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='puzzlestatus',
            unique_together={('puzzle', 'team')},
        ),
    ]
